generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../.generated/zod" // default is ./generated/zod
  // useMultipleFiles                 = true // default is false
  // writeBarrelFiles                 = false // default is true
  // createInputTypes                 = false // default is true
  // createModelTypes         = false // default is true
  // addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  // validateWhereUniqueInput = false // default is true
  createOptionalDefaultValuesTypes = true // default is false
  // createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate = false // default is true
  // writeNullishInModelTypes         = true // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

// Auth models start

model User {
  id            Int      @id @default(autoincrement())
  email         String?  @unique
  password      String?
  emailVerified Boolean  @default(false) @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("user")
}

model Account {
  id                   Int      @id @default(autoincrement())
  compoundId           String   @map("compound_id")
  userId               Int      @map("user_id")
  providerId           Int      @map("provider_id")
  providerType         String   @map("provider_type")
  providerAccountId    String   @map("provider_account_id")
  refresh_token        String   @map("refresh_token")
  access_token         String   @map("access_token")
  access_token_expires String   @map("access_token_expires")
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("account")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessiontoken String   @map("session_token")
  accessToken  String   @map("acess_token")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("session")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("verification_request")
}

// Auth models end
